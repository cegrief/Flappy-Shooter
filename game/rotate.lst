Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 01:10:39
rotate.asm						     Page 1 - 1


				; #########################################################################
				;
				;   rotate.asm - Assembly file for EECS205 Assignment 3
				;
				;
				; #########################################################################

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include trig.inc		; Useful prototypes
			      C ; #########################################################################
			      C ;
			      C ;   trig.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C ;; FIXED is a fixed point number (16 bit integer and 16 bit fractional components)
			      C ;;    To convert a FIXED value in eax into an integer:  sar eax, 16
			      C ;;    To convert an integer value in eax into a FIXED:  shl eax, 16
			      C FIXED TYPEDEF DWORD
			      C 
			      C EXTERNDEF SINTAB:WORD 
			      C 
			      C FixedSin PROTO STDCALL dwAngle:FIXED 
			      C FixedCos PROTO STDCALL dwAngle:FIXED
			      C 
			      C 
			      C 
			      C 
			      C 
				    include rotate.inc		; 	and definitions
			      C ; #########################################################################
			      C ;
			      C ;   rotate.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
 00000010		      C _EECS205BITMAP STRUCT
 00000000  00000000	      C  dwWidth      DWORD  ?
 00000004  00000000	      C  dwHeight     DWORD  ?
 00000008  00		      C  bTransparent BYTE   ?
 00000009  00000003 [	      C               BYTE   3 DUP(?)
	    00
	   ]
 0000000C  00000000	      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
			      C 
			      C BasicBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD
			      C 
			      C RotateBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD, angle:DWORD
			      C 
			      C FixedMul PROTO STDCALL x:DWORD, y:DWORD
			      C 
			      C 
			      C 

 00000000			.DATA
					;; You may declare helper variables here, but it would probably be better to use local variables

 00000000			.CODE


				;; Define the functions BasicBlit and RotateBlit
				;; Take a look at rotate.inc for the correct prototypes (if you don't follow these precisely, you'll get errors)
				;; Since we have thoroughly covered defining functions in class, its up to you from here on out...
				;; Remember to include the 'ret' instruction or your program will hang
 00000000			BasicBlit PROC STDCALL USES edx esi edi lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD 
 00000006  8B 55 08		    mov edx, lpBmp 
 00000009  8B 75 0C		    mov esi, xcenter 
 0000000C  8B 7D 10		    mov edi, ycenter 
				    INVOKE BlitReg 
				    ret 
 0000001B			BasicBlit ENDP 


 0000001B			RotateBlit PROC STDCALL USES esi edi edx lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD, angle:DWORD 
				    LOCAL cosa:FIXED 
				    LOCAL sina:FIXED 
				    LOCAL shiftX:DWORD 
				    LOCAL shiftY:DWORD 
				    LOCAL dstWidth:DWORD 
				    LOCAL dstHeight:DWORD
				    LOCAL dstX:DWORD
				    LOCAL dstY:DWORD 
				    LOCAL srcX:DWORD
				    LOCAL srcY:DWORD
				    LOCAL yPos:DWORD
				    LOCAL xPos:DWORD 
				    LOCAL lpBmpRef:BYTE                ;;lpBytes[srcY*dwWidth +srcX]

				    INVOKE FixedCos, angle 
 0000002C  89 45 FC		    mov cosa, eax

 0000002F  C7 45 F8		    mov sina, 0
	   00000000
				    INVOKE FixedSin, angle
 0000003E  29 45 F8		    sub sina, eax                           ;; I do this to make hitting the left arrow key rotate ccw instead of cw, which makes more sense. By default using the positive sin value makes it rotate cw
				                                            ;; 

 00000041  8B 75 08		    mov esi, lpBmp

				;; shiftX calculations

 00000044  8B 3E		    mov edi, (EECS205BITMAP PTR [esi]).dwWidth
 00000046  D1 EF		    shr edi, 1
				    INVOKE FixedMul, cosa, edi
 00000051  89 45 F4		    mov shiftX, eax

 00000054  8B 56 04		    mov edx, (EECS205BITMAP PTR [esi]).dwHeight
 00000057  D1 EA		    shr edx, 1
				    INVOKE FixedMul, sina, edx
 00000062  29 45 F4		    sub shiftX, eax

				;;shiftY calcs
 00000065  8B 7E 04		    mov edi, (EECS205BITMAP PTR [esi]).dwHeight
 00000068  D1 EF		    shr edi, 1
				    INVOKE FixedMul, cosa, edi
 00000073  89 45 F0		    mov shiftY, eax

 00000076  8B 16		    mov edx, (EECS205BITMAP PTR [esi]).dwWidth
 00000078  D1 EA		    shr edx, 1
				    INVOKE FixedMul, sina, edx
 00000083  01 45 F0		    add shiftY, eax

				;;dstWidth/height
 00000086  8B 06		    mov eax, (EECS205BITMAP PTR [esi]).dwWidth
 00000088  03 46 04		    add eax, (EECS205BITMAP PTR [esi]).dwHeight
 0000008B  89 45 EC		    mov dstWidth, eax
 0000008E  89 45 E8		    mov dstHeight, eax


 00000091  33 D2		    xor edx, edx
 00000093  2B 55 EC		    sub edx, dstWidth
 00000096  89 55 E4		    mov dstX, edx


 00000099  33 C9		    xor ecx, ecx
 0000009B  2B 4D E8		    sub ecx, dstHeight
 0000009E  89 4D E0		    mov dstY, ecx
				    
 000000A1			L1:
				    ;;srcX calc
				    INVOKE FixedMul, dstX, cosa
 000000AC  89 45 DC		    mov srcX, eax

				    INVOKE FixedMul, dstY, sina
 000000BA  01 45 DC		    add srcX, eax

				    ;;srcY calc
				    INVOKE FixedMul, dstY, cosa
 000000C8  89 45 D8		    mov srcY, eax

				    INVOKE FixedMul, dstX, sina
 000000D6  29 45 D8		    sub srcY, eax

 000000D9  83 7D DC 00		    cmp srcX, 0
 000000DD  7C 79		    jl l1checks

 000000DF  8B 06		    mov eax, (EECS205BITMAP PTR [esi]).dwWidth
 000000E1  39 45 DC		    cmp srcX, eax
 000000E4  7D 72		    jge l1checks

 000000E6  83 7D D8 00		    cmp srcY, 0
 000000EA  7C 6C		    jl l1checks

 000000EC  8B 46 04		    mov eax, (EECS205BITMAP PTR [esi]).dwHeight
 000000EF  39 45 D8		    cmp srcY, eax
 000000F2  7D 64		    jge l1checks

 000000F4  8B 45 0C		    mov eax, xcenter
 000000F7  03 45 E4		    add eax, dstX
 000000FA  2B 45 F4		    sub eax, shiftX
 000000FD  89 45 D0		    mov xPos, eax
				    
 00000100  83 7D D0 00		    cmp xPos, 0
 00000104  7C 52		    jl l1checks
 00000106  81 7D D0		    cmp xPos, 639
	   0000027F
 0000010D  7D 49		    jge l1checks

 0000010F  8B 45 10		    mov eax, ycenter
 00000112  03 45 E0		    add eax, dstY
 00000115  2B 45 F0		    sub eax, shiftY
 00000118  89 45 D4		    mov yPos, eax
				    
 0000011B  83 7D D4 00		    cmp yPos, 0
 0000011F  7C 37		    jl l1checks
 00000121  81 7D D4		    cmp yPos, 479
	   000001DF
 00000128  7D 2E		    jge l1checks
				    
				;;check for transparency
 0000012A  8B 7E 0C		    mov edi, (EECS205BITMAP PTR [esi]).lpBytes
 0000012D  8B 06		    mov eax, (EECS205BITMAP PTR [esi]).dwWidth
 0000012F  F7 6D D8		    imul srcY
 00000132  03 45 DC		    add eax, srcX
 00000135  03 F8		    add edi, eax
 00000137  8B 07		    mov eax, [edi]
 00000139  3A 46 08		    cmp al, (EECS205BITMAP PTR [esi]).bTransparent
 0000013C  74 1A		    je l1checks

 0000013E  88 45 CF		    mov lpBmpRef, al

 00000141  8B 45 D4		    mov eax, yPos
 00000144  F7 2D 00000000 E	    imul dwPitch
 0000014A  03 45 D0		    add eax, xPos
 0000014D  03 05 00000000 E	    add eax, lpDisplayBits
 00000153  8A 4D CF		    mov cl, lpBmpRef
 00000156  88 08		    mov [eax], cl

 00000158			l1checks:

 00000158  FF 45 E0		    inc dstY
 0000015B  8B 45 E0		    mov eax, dstY
 0000015E  3B 45 E8		    cmp eax, dstHeight
 00000161  0F 8C FFFFFF3A	    jl L1

 00000167  FF 45 E4		    inc dstX
 0000016A  33 D2		    xor edx, edx
 0000016C  2B 55 EC		    sub edx, dstWidth
 0000016F  89 55 E0		    mov dstY, edx
 00000172  8B 45 E4		    mov eax, dstX
 00000175  3B 45 EC		    cmp eax, dstWidth
 00000178  0F 8C FFFFFF23	    jl L1

				    ret
 00000185			RotateBlit ENDP

 00000185			FixedMul PROC USES edx, x:DWORD, y:DWORD
 00000189  8B 45 08			mov eax, x					
 0000018C  F7 6D 0C			imul y						
 0000018F  C1 E8 10			shr eax, 16
 00000192  C1 E2 10			shl edx, 16
 00000195  0B C2			or eax, edx
					ret
 0000019C			FixedMul	ENDP





				END		


Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 01:10:39
rotate.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

_EECS205BITMAP . . . . . . . . .	 00000010
  dwWidth  . . . . . . . . . . .	 00000000	 DWord
  dwHeight . . . . . . . . . . .	 00000004	 DWord
  bTransparent . . . . . . . . .	 00000008	 Byte
  lpBytes  . . . . . . . . . . .	 0000000C	 DWord


Types:

                N a m e                  Size     Attr

EECS205BITMAP  . . . . . . . . .	 00000010     _EECS205BITMAP 
FIXED  . . . . . . . . . . . . .	 00000004     DWord 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000019C Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BasicBlit  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
  lpBmp  . . . . . . . . . . . .	DWord	 bp + 00000008
  xcenter  . . . . . . . . . . .	DWord	 bp + 0000000C
  ycenter  . . . . . . . . . . .	DWord	 bp + 00000010
BlitReg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FixedCos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FixedMul . . . . . . . . . . . .	P Near	 00000185 _TEXT	Length= 00000017 Public STDCALL
  x  . . . . . . . . . . . . . .	DWord	 bp + 00000008
  y  . . . . . . . . . . . . . .	DWord	 bp + 0000000C
FixedSin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RotateBlit . . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 0000016A Public STDCALL
  lpBmp  . . . . . . . . . . . .	DWord	 bp + 00000008
  xcenter  . . . . . . . . . . .	DWord	 bp + 0000000C
  ycenter  . . . . . . . . . . .	DWord	 bp + 00000010
  angle  . . . . . . . . . . . .	DWord	 bp + 00000014
  cosa . . . . . . . . . . . . .	DWord	 bp - 00000004
  sina . . . . . . . . . . . . .	DWord	 bp - 00000008
  shiftX . . . . . . . . . . . .	DWord	 bp - 0000000C
  shiftY . . . . . . . . . . . .	DWord	 bp - 00000010
  dstWidth . . . . . . . . . . .	DWord	 bp - 00000014
  dstHeight  . . . . . . . . . .	DWord	 bp - 00000018
  dstX . . . . . . . . . . . . .	DWord	 bp - 0000001C
  dstY . . . . . . . . . . . . .	DWord	 bp - 00000020
  srcX . . . . . . . . . . . . .	DWord	 bp - 00000024
  srcY . . . . . . . . . . . . .	DWord	 bp - 00000028
  yPos . . . . . . . . . . . . .	DWord	 bp - 0000002C
  xPos . . . . . . . . . . . . .	DWord	 bp - 00000030
  lpBmpRef . . . . . . . . . . .	Byte	 bp - 00000031
  L1 . . . . . . . . . . . . . .	L Near	 000000A1 _TEXT	
  l1checks . . . . . . . . . . .	L Near	 00000158 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
SINTAB . . . . . . . . . . . . .	Word	 00000000 FLAT	External STDCALL
StarBitmap . . . . . . . . . . .	_EECS205BITMAP  00000000 FLAT	External STDCALL
dwPitch  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
lpDisplayBits  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL

	   0 Warnings
	   0 Errors
